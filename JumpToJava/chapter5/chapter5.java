//== 5-2 클래스 ==//
/*
객체와 인스턴스의 차이 : 객체는 큰 틀 느낌이고 클래스에 의해 만들어진 객체를 인스턴스라고 한다
객체 변수와 메서드 : 클래스 안에서 변수와 메서드 (객체 변수는 공유되지 않는다)
 */


//== 5-4 값에 의한 호출과 객체에 의한 호출 ==//
/*
값을 전달하는 것과 객체를 통해 전달하는 것의 차이를 이해하고 사용한다.
잘못 사용하게 되면 의도와 다르게 값이 다르게 변하거나 아예 변하지 않을 수도 있다
 */


//== 5-5 상속 ==//
/*
상속은 부모 클래스의 기능을 자식 클래스가 모두 물려받고 사용할 수 있는 기능이다
IS-A 관계를 고려하여 자식, 부모 클래스를 설정한다.
매서드 오버라이딩 - 부모 클래스의 메서드를 자식 클래스에서 더 구체화 할 수 있다 (덮어쓰기 느낌)
메서드 오버로딩 - 변경이 아닌 추가! 입력 항목이 다른 경우 같은 이름의 메서드를 추가할 수 있다
 */


//== 5-6 생성자 ==//
/*
생성되는 시점에 동작하는 코드, 객체 변수에 요구하는 값을 설정해야지만 객체가 생성되도록 강제

디폴트 생성자 : 생성자를 하나도 작성하지 않을 경우 자동으로 생성된다.
생성자도 오버로딩이 가능하다
 */


//== 5-7 인터페이스 ==//
/*
구현하는 시점에서 구현체의 갯수나 정확한 정보를 알지 못할 때 인터페이스로 작성하는 것이 효과적이다
 */


//== 5-8 다형성 ==//
/*
다형성을 객체지향 프로그래밍의 중요한 특징이다
하나의 객체가 상황에 따라 여러 개의 자료형 타입을 가질 수 있는 것
 */


//== 5-9 추상 클래스 ==//
/*
클래스 앞에 abstract 키워드를 붙여서 사용한다
추상 클래스를 상속받는 클래스는 의무적으로 추상 클래스의 메서드를 구현해야 한다
 */